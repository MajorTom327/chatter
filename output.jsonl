{"prompt":"Genere un schema mongoose de contrat avec la gamme, l'addresse et la CCN.\n","completion":"```typescript\nexport enum ContractTypeEnum {\n  COMPANY = 'COMPANY',\n  TNS = 'TNS',\n  INDIVIDUAL = 'INDIVIDUAL',\n}\n\nexport default ContractTypeEnum;\n```\n\n```typescript\nexport enum ContractTypeEnum {\n  IN_PROGRESS = 'IN_PROGRESS',\n}\n\nexport default ContractTypeEnum;\n```\n\n```typescript\nexport enum EGamme {\n  SANTE = 'SANTE',\n  PREVOYANCE = 'PREVOYANCE'\n}\n\nexport default EGamme;\n```\n\n```typescript\nexport enum ERegime {\n  GENERAL = 'GENERAL',\n  ALSACE_MOSELLE = 'ALSACE_MOSELLE'\n}\n\nexport default ERegime;\n```\n\n```typescript\nexport { EGamme } from './EGamme';\nexport { ERegime } from './ERegime';\nexport { ContractTypeEnum } from './ContractTypeEnum';\nexport { ContractStatusEnum } from './ContractStatusEnum';\n```\n\n```typescript\n\nimport { values } from 'ramda'\nimport { EGamme, ERegime, ContractTypeEnum, ContractStatusEnum} from './enum'\n\nconst collegeSchema = new Schema({\n\tcollege: { type: String, enum: values(ECollege) },\n\tisNewRegime: { type: Boolean },\n\thasAlreadyHadInsurance: { type: Boolean },\n\teffectDate: { type: String },\n\tnbEmployees: { type: Number },\n\tmoyAgeEmployees: { type: Number },\n\tnbChildren: { type: Number },\n\tregime: { type: String, enum: values(ERegime) },\n}, { _id: false });\n\nconst collectiveConventionSchema = new Schema({\n\tidcc: { type: String },\n\tccnRef: { type: String },\n\thasConvention: { type: Boolean, default: true }\n}, { _id: false });\n\nconst establishmentAddressSchema = new Schema({\n\tfields: { type: [String] },\n\tpostalCode: { type: String },\n\tcity: { type: String },\n\tisHeadOffice: { type: Boolean }\n}, { _id: false });\n\nconst establishmentSchema = new Schema({\n\tname: { type: String },\n\tsiret: { type: String },\n\tlegalForm: { type: String },\n\tcreationDate: { type: String },\n\tnic: { type: String },\n\tapeCode: { type: String },\n\tusualDenomination: { type: String },\n\tclassActivity: { type: String },\n\taddress: establishmentAddressSchema,\n\tcollectiveConvention: collectiveConventionSchema,\n\tphone: { type: String },\n\temail: { type: String },\n\tcorrespondanceAddress: new Schema({\n\t\tfields: { type: [String] },\n\t\tpostalCode: { type: String },\n\t\tcity: { type: String },\n\t}, { _id: false }),\n\tacceptOffers: { type: Boolean }\n}, { _id: true });\n\nexport const gammeSchema = new Schema({\n  gamme: { type: String, enum: values(EGamme) },\n\tcolleges: [collegeSchema]\n}, { timestamps: false })\n\nexport const Contract = new Schema({\n  contractType: { type: String, enum: values(ContractTypeEnum) },\n  status: { type: String, enum: values(ContractStatusEnum), default: ContractStatusEnum.IN_PROGRESS },\n  gammeDetails: [gammeSchema],\n  establishments: [establishmentSchema]\n}, , { timestamps: true\n})\n\nexport default Contract;\n```\n"},
{"prompt":"Genere une enum pour un type de contrat\n","completion":"```typescript\nexport enum EContractType {\n  COMPANY = 'COMPANY',\n  TNS = 'TNS',\n  INDIVIDUAL = 'INDIVIDUAL',\n}\nexport default EContractType;\n```\n\n```typescript\nexport { EContractType } from './EContractType';\n```\n"},
{"prompt":"Genere une enum pour le status du contrat\n","completion":"```typescript\nexport enum ContractTypeEnum {\n  IN_PROGRESS = 'IN_PROGRESS',\n}\n\nexport default ContractTypeEnum;\n```\n\n```typescript\nexport { ContractTypeEnum } from './ContractTypeEnum';\n```\n"},
{"prompt":"Genere une enum pour la gamme du contrat\n","completion":"```typescript\nexport enum EGamme {\n  SANTE = 'SANTE',\n  PREVOYANCE = 'PREVOYANCE'\n}\n\nexport default EGamme;\n```\n\n```typescript\nexport { EGamme } from './EGamme';\n```\n"},
{"prompt":"Creer un schema mongoose pour un contrat avec un scheam pour une entreprise et les champs addresse et CCN avec leur Schema associer\n","completion":"# Enums\n```typescript\nexport enum ContractTypeEnum {\n  COMPANY = 'COMPANY',\n  TNS = 'TNS',\n  INDIVIDUAL = 'INDIVIDUAL',\n}\n\nexport default ContractTypeEnum;\n```\n\n```typescript\nexport enum ContractTypeEnum {\n  IN_PROGRESS = 'IN_PROGRESS',\n}\n\nexport default ContractTypeEnum;\n```\n\n```typescript\nexport { ContractTypeEnum } from './ContractTypeEnum';\nexport { ContractStatusEnum } from './ContractStatusEnum';\n```\n\n# Contract\n```typescript\nimport { Schema } from 'mongoose';\nimport { values } from 'ramda'\nimport { ContractTypeEnum, ContractStatusEnum} from './enum'\n\nconst collectiveConventionSchema = new Schema({\n\tidcc: { type: String },\n\tccnRef: { type: String },\n\thasConvention: { type: Boolean, default: true }\n}, { _id: false });\n\nconst establishmentAddressSchema = new Schema({\n\tfields: { type: [String] },\n\tpostalCode: { type: String },\n\tcity: { type: String },\n\tisHeadOffice: { type: Boolean }\n}, { _id: false });\n\nconst establishmentSchema = new Schema({\n\tname: { type: String },\n\tsiret: { type: String },\n\tlegalForm: { type: String },\n\tcreationDate: { type: String },\n\tnic: { type: String },\n\tapeCode: { type: String },\n\tusualDenomination: { type: String },\n\tclassActivity: { type: String },\n\taddress: establishmentAddressSchema,\n\tcollectiveConvention: collectiveConventionSchema,\n\tphone: { type: String },\n\temail: { type: String },\n\tcorrespondanceAddress: new Schema({\n\t\tfields: { type: [String] },\n\t\tpostalCode: { type: String },\n\t\tcity: { type: String },\n\t}, { _id: false }),\n\tacceptOffers: { type: Boolean }\n}, { _id: false });\n\nexport const Contract = new Schema({\n  contractType: { type: String, enum: values(ContractTypeEnum) },\n  status: { type: String, enum: values(ContractStatusEnum), default: ContractStatusEnum.IN_PROGRESS },\n  establishment: establishmentSchema,\n}, , { timestamps: true })\n```\n"},
{"prompt":"Creer un schema mongoose pour une entreprise avec son schema pour l'addresse et son schema pour la CCN\n","completion":"```typescript\nconst collectiveConventionSchema = new Schema({\n\tidcc: { type: String },\n\tccnRef: { type: String },\n\thasConvention: { type: Boolean, default: true }\n}, { _id: false });\n\nconst establishmentAddressSchema = new Schema({\n\tfields: { type: [String] },\n\tpostalCode: { type: String },\n\tcity: { type: String },\n\tisHeadOffice: { type: Boolean }\n}, { _id: false });\n\nconst establishmentSchema = new Schema({\n\tname: { type: String },\n\tsiret: { type: String },\n\tlegalForm: { type: String },\n\tcreationDate: { type: String },\n\tnic: { type: String },\n\tapeCode: { type: String },\n\tusualDenomination: { type: String },\n\tclassActivity: { type: String },\n\taddress: establishmentAddressSchema,\n\tcollectiveConvention: collectiveConventionSchema,\n\tphone: { type: String },\n\temail: { type: String },\n\tcorrespondanceAddress: new Schema({\n\t\tfields: { type: [String] },\n\t\tpostalCode: { type: String },\n\t\tcity: { type: String },\n\t}, { _id: false }),\n\tacceptOffers: { type: Boolean }\n}, { _id: true });\n```\n"},
{"prompt":"Genere un schema mongoose pour une gamme qui devra contenir un enum pour le regime etant soit \"general\" soit \"alsace moselle\".\nLe type de gamme est un enum etant Soit sante soit prevoyance\nLa gamme contient un tableau de college avec les informations suivantes:\n- college: enum\n- isNewRegime: boolean pour savoir si le regime est nouveau\n- hasAlreadyHadInsurance: boolean pour si l'entreprise a deja eu une assurance\n- effectDate: date d'effet de l'assurance\n- nbEmployees: nombre d'employes\n- moyAgeEmployees: age moyen des employes\n- nbChildren: nombre d'enfants\n- regime: Enumeration definissant le type de regime pour connaitre si celui ci est general ou local\n","completion":"```typescript\nexport enum EGamme {\n  SANTE = 'SANTE',\n  PREVOYANCE = 'PREVOYANCE'\n}\n\nexport default EGamme;\n```\n\n```typescript\nexport enum ERegime {\n  GENERAL = 'GENERAL',\n  ALSACE_MOSELLE = 'ALSACE_MOSELLE'\n}\n\nexport default ERegime;\n```\n\n```typescript\nexport { EGamme } from './EGamme';\nexport { ERegime } from './ERegime';\n```\n\n\n```typescript\nimport { Schema } from 'mongoose';\nimport { values } from 'ramda';\nimport { EGamme, ERegime } from './enum';\n\nconst collegeSchema = new Schema({\n\tcollege: { type: String, enum: values(ECollege) },\n\tisNewRegime: { type: Boolean },\n\thasAlreadyHadInsurance: { type: Boolean },\n\teffectDate: { type: String },\n\tnbEmployees: { type: Number },\n\tmoyAgeEmployees: { type: Number },\n\tnbChildren: { type: Number },\n\tregime: { type: String, enum: values(ERegime) },\n}, { _id: false });\n\n\nexport const gammeSchema = new Schema({\n  gamme: { type: String, enum: values(EGamme) },\n\tcolleges: [collegeSchema]\n}, { timestamps: false })\n\nexport default gammeSchema\n```\n"},
{"prompt":"Genere le schema mongoose de la convention collectiver\n","completion":"```typescript\nconst collectiveConventionSchema = new Schema({\n\tidcc: { type: String },\n\tccnRef: { type: String },\n\thasConvention: { type: Boolean, default: true }\n}, { _id: false });\n```\n"},
{"prompt":"Genere une enum pour les colleges\n","completion":"```typescript\nexport enum ECollege {\n  CADRE = 'CADRE',\n  NON_CADRE = 'NON_CADRE'\n}\nexport default ECollege;\n```\n\n```typescript\nexport { ECollege } from './ECollege';\n```\n"},
{"prompt":"Creer le schema mongoose de la base d'un contrat\nAjoute une enum pour le type avec `COMPANY`, `TNS`, `INDIVIDUAL`\nUne enum pour le status du contrat avec `IN_PROGRESS`\n","completion":"# Enums\n```typescript\nexport enum ContractTypeEnum {\n  COMPANY = 'COMPANY',\n  TNS = 'TNS',\n  INDIVIDUAL = 'INDIVIDUAL',\n}\n\nexport default ContractTypeEnum;\n```\n\n```typescript\nexport enum ContractTypeEnum {\n  IN_PROGRESS = 'IN_PROGRESS',\n}\n\nexport default ContractTypeEnum;\n```\n\n```typescript\nexport { ContractTypeEnum } from './ContractTypeEnum';\nexport { ContractStatusEnum } from './ContractStatusEnum';\n```\n\n# Contract\n```typescript\nimport { values } from 'ramda'\nimport { ContractTypeEnum, ContractStatusEnum} from './enum'\n\nexport const Contract = new Schema({\n  contractType: { type: String, enum: values(ContractTypeEnum) },\n  status: { type: String, enum: values(ContractStatusEnum), default: ContractStatusEnum.IN_PROGRESS },\n}, , { timestamps: true })\n\nexport default Contract;\n```\n"},
{"prompt":"Creer le schema pour le college d'un contrat\nCelui ci doit avoir un enum definissant si le college est CADRE ou NON_CADRE\nisNewRegime doit permettre de savoir si le regime est nouveau\nhasAlreadyHadInsurance doit permettre de savoir si l'entreprise a deja eu une assurance\neffectDate doit permettre de connaitre la date d'effet de l'assurance\nnbEmployees doit permettre de connaitre le nombre d'employes\nmoyAgeEmployees doit permettre de connaitre l'age moyen des employes\nnbChildren doit permettre de connaitre le nombre d'enfants\nregime doit permettre de connaitre la nature du regime, a savoir si il est GENERAL ou LOCAL.\n","completion":"```typescript\nexport enum ECollege {\n  CADRE = 'CADRE',\n  NON_CADRE = 'NON_CADRE'\n}\n\nexport default ECollege;\n```\n\n```typescript\nexport enum ERegime {\n  GENERAL = 'GENERAL',\n  LOCAL = 'LOCAL'\n}\n\nexport default ERegime;\n```\n\n```typescript\nexport { ERegime } from './ERegime';\nexport { ECollege } from './ECollege';\n```\n\n```typescript\nimport { ECollege, ERegime } from './enum';\nconst collegeSchema = new Schema({\n\tcollege: { type: String, enum: values(ECollege) },\n\tisNewRegime: { type: Boolean },\n\thasAlreadyHadInsurance: { type: Boolean },\n\teffectDate: { type: String },\n\tnbEmployees: { type: Number },\n\tmoyAgeEmployees: { type: Number },\n\tnbChildren: { type: Number },\n\tregime: { type: String, enum: values(ERegime) },\n}, { _id: false });\n```\n"},
